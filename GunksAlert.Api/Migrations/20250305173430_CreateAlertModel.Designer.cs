// <auto-generated />
using System;
using GunksAlert.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GunksAlert.Api.Migrations
{
    [DbContext(typeof(GunksDbContext))]
    [Migration("20250305173430_CreateAlertModel")]
    partial class CreateAlertModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlertCriteriaAppUser", b =>
                {
                    b.Property<string>("AppUsersId")
                        .HasColumnType("text");

                    b.Property<int>("CriteriasId")
                        .HasColumnType("integer");

                    b.HasKey("AppUsersId", "CriteriasId");

                    b.HasIndex("CriteriasId");

                    b.ToTable("AlertCriteriaAppUser", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ForecastDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("SentOn")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Alert", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.AlertCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("ClimbableConditionsId")
                        .HasColumnType("integer");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlertPeriodId");

                    b.HasIndex("ClimbableConditionsId");

                    b.HasIndex("CragId");

                    b.ToTable("AlertCriteria", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.AlertPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Months")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AlertPeriod", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.ClimbabilityReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ChanceDry")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "chance_dry");

                    b.Property<bool>("CloudsGood")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "clouds_good");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<bool>("HumidityGood")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "humidity_good");

                    b.Property<bool>("TempGood")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "temp_good");

                    b.Property<bool>("WindGood")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_good");

                    b.HasKey("Id");

                    b.ToTable("ClimbabilityReport", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.ClimbableConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Clouds")
                        .HasColumnType("integer");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<double>("Pop")
                        .HasColumnType("double precision");

                    b.Property<double>("Rain")
                        .HasColumnType("double precision");

                    b.Property<double>("Snow")
                        .HasColumnType("double precision");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("TempMax")
                        .HasColumnType("double precision");

                    b.Property<double>("TempMin")
                        .HasColumnType("double precision");

                    b.Property<int>("WindDegree")
                        .HasColumnType("integer");

                    b.Property<double>("WindGust")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ClimbableConditions", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.Crag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Crag", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.DailyCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("IconDay")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("IconNight")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "main");

                    b.HasKey("Id");

                    b.ToTable("DailyCondition", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.Forecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Clouds")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "clouds");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.Property<int>("DailyConditionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dt");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "humidity");

                    b.Property<double>("Pop")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "pop");

                    b.Property<double>("Rain")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "rain");

                    b.Property<double>("Snow")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "snow");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "summary");

                    b.Property<double>("TempFeelsLikeDay")
                        .HasColumnType("double precision");

                    b.Property<double>("TempHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("TempLow")
                        .HasColumnType("double precision");

                    b.Property<int>("WindDegree")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_deg");

                    b.Property<double>("WindGust")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_gust");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_speed");

                    b.HasKey("Id");

                    b.ToTable("Forecast", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.WeatherHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Clouds")
                        .HasColumnType("double precision");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double>("Precipitation")
                        .HasColumnType("double precision");

                    b.Property<double>("TempHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("TempLow")
                        .HasColumnType("double precision");

                    b.Property<double>("WindDegree")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("WeatherHistory", "public");
                });

            modelBuilder.Entity("GunksAlert.Api.Security.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("AlertCriteriaAppUser", b =>
                {
                    b.HasOne("GunksAlert.Api.Security.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GunksAlert.Api.Models.AlertCriteria", null)
                        .WithMany()
                        .HasForeignKey("CriteriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GunksAlert.Api.Models.Alert", b =>
                {
                    b.HasOne("GunksAlert.Api.Security.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GunksAlert.Api.Models.AlertCriteria", b =>
                {
                    b.HasOne("GunksAlert.Api.Models.AlertPeriod", "AlertPeriod")
                        .WithMany()
                        .HasForeignKey("AlertPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GunksAlert.Api.Models.ClimbableConditions", "ClimbableConditions")
                        .WithMany()
                        .HasForeignKey("ClimbableConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GunksAlert.Api.Models.Crag", "Crag")
                        .WithMany()
                        .HasForeignKey("CragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertPeriod");

                    b.Navigation("ClimbableConditions");

                    b.Navigation("Crag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GunksAlert.Api.Security.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GunksAlert.Api.Security.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GunksAlert.Api.Security.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GunksAlert.Api.Security.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

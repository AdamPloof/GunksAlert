// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using GunksAlert.Api.Data;

#nullable disable

namespace GunksAlert.Api.Migrations
{
    [DbContext(typeof(GunksDbContext))]
    [Migration("20250118154432_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GunksAlert.Models.AlertCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("ClimbableConditionsId")
                        .HasColumnType("integer");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlertPeriodId");

                    b.HasIndex("ClimbableConditionsId");

                    b.HasIndex("CragId");

                    b.ToTable("AlertCriteria", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.AlertPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AlertPeriod", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.ClimbableConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Clouds")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<int>("Pop")
                        .HasColumnType("integer");

                    b.Property<double>("Rain")
                        .HasColumnType("double precision");

                    b.Property<double>("Snow")
                        .HasColumnType("double precision");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TempMax")
                        .HasColumnType("integer");

                    b.Property<int>("TempMin")
                        .HasColumnType("integer");

                    b.Property<int>("WindDegree")
                        .HasColumnType("integer");

                    b.Property<int>("WindGust")
                        .HasColumnType("integer");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ClimbableConditions", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.Crag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Crag", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.DailyCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("IconDay")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("IconNight")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "main");

                    b.HasKey("Id");

                    b.ToTable("DailyCondition", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.Forecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Clouds")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "clouds");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.Property<int>("DailyConditionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "dt");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "humidity");

                    b.Property<double>("Pop")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "pop");

                    b.Property<double>("Rain")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "rain");

                    b.Property<double>("Snow")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "snow");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasAnnotation("Relational:JsonPropertyName", "summary");

                    b.Property<double>("TempFeelsLikeDay")
                        .HasColumnType("double precision");

                    b.Property<double>("TempHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("TempLow")
                        .HasColumnType("double precision");

                    b.Property<int>("WindDegree")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_deg");

                    b.Property<double>("WindGust")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_gust");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "wind_speed");

                    b.HasKey("Id");

                    b.ToTable("Forecast", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.WeatherHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Clouds")
                        .HasColumnType("double precision");

                    b.Property<int>("CragId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double>("Precipitation")
                        .HasColumnType("double precision");

                    b.Property<double>("TempHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("TempLow")
                        .HasColumnType("double precision");

                    b.Property<double>("WindDegree")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("WeatherHistory", "public");
                });

            modelBuilder.Entity("GunksAlert.Models.AlertCriteria", b =>
                {
                    b.HasOne("GunksAlert.Models.AlertPeriod", "AlertPeriod")
                        .WithMany()
                        .HasForeignKey("AlertPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GunksAlert.Models.ClimbableConditions", "ClimbableConditions")
                        .WithMany()
                        .HasForeignKey("ClimbableConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GunksAlert.Models.Crag", "Crag")
                        .WithMany()
                        .HasForeignKey("CragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertPeriod");

                    b.Navigation("ClimbableConditions");

                    b.Navigation("Crag");
                });
#pragma warning restore 612, 618
        }
    }
}
